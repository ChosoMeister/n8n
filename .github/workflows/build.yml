name: build-and-push

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: chosomeister/n8n
  IMAGE_TAG: enterprise

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: Build and Push n8n Image
    runs-on: ubuntu-latest

    steps:
      # ----- Checkout this repo (contains the workflow + optional bypass.sh) -----
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # ----- Clone upstream n8n and checkout latest stable release tag -----
      - name: Clone upstream n8n (latest stable tag)
        run: |
          set -euo pipefail
          git clone https://github.com/n8n-io/n8n.git n8n-source
          cd n8n-source
          releases_json=$(curl -s https://api.github.com/repos/n8n-io/n8n/releases)
          latest_stable_tag=$(echo "$releases_json" | jq -r '.[] | select(.prerelease == false) | .tag_name' | head -n 1)
          if [ -n "$latest_stable_tag" ] && git rev-parse --verify "$latest_stable_tag" >/dev/null 2>&1; then
            git checkout "$latest_stable_tag"
          fi
          echo "N8N_COMMIT_HASH=$(git rev-parse HEAD)" >> "$GITHUB_ENV"
          echo "Checked out tag: ${latest_stable_tag:-"(left at default branch)"}"

      # ----- If bypass.sh exists in this repo, copy into n8n-source and run it -----
      - name: Apply license bypass (if provided)
        run: |
          set -euo pipefail
          if [ -f "bypass.sh" ]; then
            cp bypass.sh n8n-source/
            echo "bypass.sh copied to n8n-source"
          else
            echo "bypass.sh not found in root; skipping copy"
          fi
          cd n8n-source
          if [ -f "bypass.sh" ]; then
            chmod +x bypass.sh
            ./bypass.sh --auto
            echo "bypass.sh executed (auto mode)"
          else
            echo "No bypass.sh inside n8n-source; skipping execution"
          fi

      # ----- Node & pnpm toolchain -----
      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          dest: ~/setup-pnpm

      - name: Compute pnpm store path
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Restore pnpm store cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # ----- Install deps & build monorepo -----
      - name: Install dependencies
        working-directory: n8n-source
        run: pnpm install --frozen-lockfile

      - name: Build n8n monorepo
        working-directory: n8n-source
        run: pnpm run build

      # ----- Docker buildx & registry login -----
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ----- Build image with Docker (load into Docker daemon) -----
      # NOTE: We build from the upstream n8n repo we cloned and (optionally) modified.
      - name: Build Docker image (Buildx + load)
        working-directory: n8n-source
        run: |
          set -euo pipefail
          docker buildx build \
            --load \
            --platform=linux/amd64 \
            -t $REGISTRY/$IMAGE_NAME:$IMAGE_TAG \
            -t $REGISTRY/$IMAGE_NAME:latest \
            -f docker/images/n8n/Dockerfile .
          # Ensure image is present in Docker
          docker image inspect $REGISTRY/$IMAGE_NAME:$IMAGE_TAG > /dev/null

      # ----- Push both tags -----
      - name: Push images
        run: |
          set -euo pipefail
          docker push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
          docker push $REGISTRY/$IMAGE_NAME:latest
