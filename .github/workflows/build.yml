name: Build and Push n8n Enterprise Docker Image

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: chosomeister/n8n
  IMAGE_TAG: enterprise

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout current repository
      uses: actions/checkout@v4

    - name: Clone n8n repository
      run: |
        git clone --depth=1 https://github.com/n8n-io/n8n.git n8n-source
        cd n8n-source
        
        # Fetch only the latest release tag
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*

        # Get latest stable release
        releases_json=$(curl -s --retry 3 --retry-delay 5 https://api.github.com/repos/n8n-io/n8n/releases)
        if [ $? -ne 0 ]; then
          echo "Failed to fetch releases, using default branch"
        else
          latest_stable_tag=$(echo "$releases_json" | jq -r '.[] | select(.prerelease == false) | .tag_name' | head -n 1)
          if [ -n "$latest_stable_tag" ] && [ "$latest_stable_tag" != "null" ]; then
            echo "Checking out latest stable tag: $latest_stable_tag"
            git fetch --depth=1 origin tag "$latest_stable_tag"
            git checkout "$latest_stable_tag"
          else
            echo "No stable release found, using default branch"
          fi
        fi

        n8n_commit_hash=$(git rev-parse HEAD)
        n8n_version=$(node -p "require('./packages/cli/package.json').version" 2>/dev/null || echo "unknown")
        echo "Cloned n8n repository successfully"
        echo "Current commit: $n8n_commit_hash"
        echo "n8n version: $n8n_version"
        echo "N8N_COMMIT_HASH=$n8n_commit_hash" >> $GITHUB_ENV
        echo "N8N_VERSION=$n8n_version" >> $GITHUB_ENV

    - name: Read version requirements from n8n package.json
      run: |
        cd n8n-source
        
        NODE_VERSION="22"
        if [ -f "package.json" ]; then
          NODE_VERSION=$(node -e "
            try {
              const pkg = require('./package.json');
              const nodeEngine = pkg.engines && pkg.engines.node;
              if (nodeEngine) {
                const match = nodeEngine.match(/(\d+)/);
                console.log(match ? match[1] : '22');
              } else {
                console.log('22');
              }
            } catch (e) {
              console.log('22');
            }
          ")
        fi
        
        PNPM_VERSION="10.16.1"
        if [ -f "package.json" ]; then
          PNPM_VERSION=$(node -e "
            try {
              const pkg = require('./package.json');
              const packageManager = pkg.packageManager;
              if (packageManager && packageManager.includes('pnpm@')) {
                console.log(packageManager.split('@')[1]);
              } else if (pkg.engines && pkg.engines.pnpm) {
                const match = pkg.engines.pnpm.match(/(\d+\.\d+\.\d+)/);
                console.log(match ? match[1] : '10.16.1');
              } else {
                console.log('10.16.1');
              }
            } catch (e) {
              console.log('10.16.1');
            }
          ")
        fi
        
        echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV
        echo "PNPM_VERSION=$PNPM_VERSION" >> $GITHUB_ENV

    - name: Copy bypass script to n8n repository
      run: |
        if [ -f "bypass.sh" ]; then
          cp bypass.sh n8n-source/
          echo "bypass.sh copied to n8n-source directory"
        else
          echo "::warning::bypass.sh not found in current repository"
        fi

    - name: Setup Node.js with detected version
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm with detected version
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('n8n-source/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo apt-get clean
        docker system prune -af

    - name: Install dependencies
      run: |
        cd n8n-source
        pnpm install --frozen-lockfile --prefer-offline
      timeout-minutes: 30

    - name: Run bypass script
      run: |
        cd n8n-source
        if [ -f "bypass.sh" ]; then
          chmod +x bypass.sh
          if ./bypass.sh --auto; then
            echo "bypass.sh executed successfully with --auto mode"
          else
            echo "::error::bypass.sh execution failed"
            exit 1
          fi
        else
          echo "::warning::bypass.sh not found in n8n repository, skipping..."
        fi

    - name: Build n8n with memory optimization
      run: |
        cd n8n-source
        export NODE_OPTIONS="--max_old_space_size=7168"
        export NODE_ENV=production
        
        echo "Starting n8n build process..."
        echo "Using Node.js version: $(node --version)"
        echo "Using pnpm version: $(pnpm --version)"
        echo "Available memory:"
        free -h
        
        # Build with retry logic
        for i in {1..2}; do
          if pnpm run build; then
            echo "Build completed successfully"
            break
          else
            echo "::warning::Build attempt $i failed, retrying..."
            if [ $i -eq 2 ]; then
              echo "::error::Build failed after 2 attempts"
              exit 1
            fi
            sleep 30
          fi
        done
      timeout-minutes: 60

    - name: Create complete production bundle
      run: |
        cd n8n-source
        echo "Creating complete production bundle with all dependencies..."
        
        # Create production directory
        mkdir -p n8n-bundle
        
        # Copy the ENTIRE built project INCLUDING node_modules
        cp -r . n8n-bundle/
        
        # Clean up development files we don't need in production
        rm -rf n8n-bundle/.git
        rm -rf n8n-bundle/cypress
        rm -rf n8n-bundle/scripts
        rm -rf n8n-bundle/patches
        
        # Create a simple package.json for runtime
        cat > n8n-bundle/package.json << 'EOF'
        {
          "name": "n8n-enterprise",
          "version": "${{ env.N8N_VERSION }}",
          "description": "n8n Enterprise Docker Build",
          "main": "./packages/cli/dist/index.js",
          "bin": {
            "n8n": "./packages/cli/bin/n8n"
          },
          "scripts": {
            "start": "node packages/cli/dist/index.js"
          }
        }
        EOF
        
        echo "Complete bundle created with full node_modules"
        ls -la n8n-bundle/

    - name: Create working Dockerfile
      run: |
        cd n8n-source
        cat > Dockerfile << 'EOF'
        FROM node:22-alpine
        
        # Install system dependencies
        RUN apk add --no-cache \
          tini \
          su-exec \
          python3 \
          make \
          g++ \
          cairo-dev \
          pango-dev \
          jpeg-dev \
          giflib-dev \
          git
        
        # Create app directory
        WORKDIR /usr/src/app
        
        # Copy the COMPLETE built n8n bundle with all dependencies
        COPY n8n-bundle/ ./
        
        # Fix permissions and create symlink
        RUN chown -R node:node /usr/src/app && \
          chmod +x packages/cli/bin/n8n && \
          ln -s /usr/src/app/packages/cli/bin/n8n /usr/local/bin/n8n
        
        # Create n8n data directory
        RUN mkdir -p /home/node/.n8n && \
          chown -R node:node /home/node
        
        # Set environment
        ENV N8N_USER_FOLDER=/home/node/.n8n
        ENV NODE_ENV=production
        ENV NODE_OPTIONS="--max-old-space-size=2048"
        
        EXPOSE 5678
        
        USER node
        WORKDIR /home/node
        
        ENTRYPOINT ["tini", "--"]
        CMD ["n8n"]
        EOF
        
        echo "Working Dockerfile created with complete bundle"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker image with complete bundle
      run: |
        cd n8n-source
        echo "Building Docker image with complete n8n bundle..."
        
        docker build \
          --progress=plain \
          --build-arg NODE_ENV=production \
          -t n8n:latest \
          .
        
        # Verify image was built
        echo "Built Docker images:"
        docker images n8n:latest
        
        if [ "$(docker images -q n8n:latest)" = "" ]; then
          echo "::error::Docker image was not built successfully"
          exit 1
        fi
        
        echo "Docker image built successfully with tag: n8n:latest"
      timeout-minutes: 45

    - name: Tag and push Docker image
      run: |
        cd n8n-source
        
        IMAGE_NAME_LOCAL="n8n:latest"
        
        if [ "$(docker images -q $IMAGE_NAME_LOCAL)" = "" ]; then
          echo "::error::Could not find built n8n Docker image"
          echo "Available images:"
          docker images
          exit 1
        fi
        
        echo "Found Docker image: $IMAGE_NAME_LOCAL"
        echo "N8N commit hash: ${{ env.N8N_COMMIT_HASH }}"
        echo "N8N version: ${{ env.N8N_VERSION }}"
        
        # Define all tags
        TAGS=(
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:n8n-${{ env.N8N_COMMIT_HASH }}"
        )
        
        if [ "${{ env.N8N_VERSION }}" != "unknown" ]; then
          TAGS+=("${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ env.N8N_VERSION }}")
        fi
        
        # Tag all images
        for tag in "${TAGS[@]}"; do
          echo "Tagging: $tag"
          docker tag "$IMAGE_NAME_LOCAL" "$tag"
        done
        
        # Push all tags with retry logic
        for tag in "${TAGS[@]}"; do
          echo "Pushing: $tag"
          for i in {1..3}; do
            if docker push "$tag"; then
              echo "Successfully pushed $tag"
              break
            else
              echo "::warning::Failed to push $tag on attempt $i/3"
              if [ $i -eq 3 ]; then
                echo "::error::Failed to push $tag after 3 attempts"
                exit 1
              fi
              sleep 10
            fi
          done
        done
        
        echo "Successfully pushed all Docker image tags to GHCR"
      timeout-minutes: 30

    - name: Generate build summary
      if: always()
      run: |
        echo "## Build Summary 📊" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| n8n Version | \`${{ env.N8N_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| n8n Commit | \`${{ env.N8N_COMMIT_HASH }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Node.js Version | \`${{ env.NODE_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| pnpm Version | \`${{ env.PNPM_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Registry | \`${{ env.REGISTRY }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Image | \`${{ env.IMAGE_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ env.N8N_VERSION }}" != "unknown" ]; then
          echo "| Available Tags | \`enterprise\`, \`latest\`, \`v${{ env.N8N_VERSION }}\`, \`${{ github.sha }}\`, \`n8n-${{ env.N8N_COMMIT_HASH }}\` |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Available Tags | \`enterprise\`, \`latest\`, \`${{ github.sha }}\`, \`n8n-${{ env.N8N_COMMIT_HASH }}\` |" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Clean up
      if: always()
      run: |
        docker system prune -af --volumes
        if [ -d "${{ env.STORE_PATH }}" ]; then
          du -sh "${{ env.STORE_PATH }}" || true
        fi
